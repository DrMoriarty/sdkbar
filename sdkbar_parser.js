/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var sdkbar_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,16],$V2=[1,17],$V3=[1,19],$V4=[1,12],$V5=[1,15],$V6=[1,18],$V7=[63,65],$V8=[6,16,17,48,50,57,59,63,65],$V9=[1,37],$Va=[1,38],$Vb=[1,28],$Vc=[1,39],$Vd=[1,29],$Ve=[1,30],$Vf=[1,25],$Vg=[1,26],$Vh=[1,41],$Vi=[1,42],$Vj=[1,43],$Vk=[6,10,16,17,23,25,27,33,34,35,36,37,38,39,40,41,43,48,50,57,59,63,65],$Vl=[1,47],$Vm=[1,50],$Vn=[1,51],$Vo=[1,52],$Vp=[1,53],$Vq=[1,54],$Vr=[1,55],$Vs=[1,56],$Vt=[1,57],$Vu=[6,10,16,17,23,25,27,34,35,36,37,38,39,40,41,43,48,50,57,59,63,65],$Vv=[2,22],$Vw=[1,65],$Vx=[2,2],$Vy=[1,83],$Vz=[1,99],$VA=[2,40],$VB=[6,8,10,16,17,23,25,27,33,34,35,36,37,38,39,40,41,42,43,48,50,57,59,63,65],$VC=[6,10,16,17,23,25,27,34,35,43,48,50,57,59,63,65],$VD=[6,10,16,17,23,25,27,34,35,36,37,43,48,50,57,59,63,65],$VE=[6,10,16,17,23,25,27,34,35,36,37,38,39,43,48,50,57,59,63,65],$VF=[10,27,43];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"eol":3,"EOL":4,"variable":5,"TOKEN":6,"array_element":7,"[":8,"NUMBER":9,"]":10,"long_token":11,"array":12,"arg_list":13,"inline_iteration":14,"string":15,"STRING":16,"MULTILINE_STRING":17,"rvalue":18,"object":19,"object_start":20,"{":21,"object_end":22,"}":23,"object_declaration":24,":":25,"expression":26,"COMMA":27,"operand":28,"TRUE":29,"FALSE":30,"function_call":31,"NOT":32,"IN":33,"AND":34,"OR":35,"EQ":36,"NE":37,"+":38,"-":39,"*":40,"/":41,"(":42,")":43,"named_parameter":44,"=":45,"DOT":46,"iteration":47,"FOR":48,"block":49,"IF":50,"if_statement":51,"ELSE":52,"ELIF":53,"inline_if_statement":54,"assignment":55,"import":56,"IMPORT":57,"routine":58,"DEF":59,"line":60,"blockcontent":61,"INDENT":62,"DEDENT":63,"prog":64,"EOF":65,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOL",6:"TOKEN",8:"[",9:"NUMBER",10:"]",16:"STRING",17:"MULTILINE_STRING",21:"{",23:"}",25:":",27:"COMMA",29:"TRUE",30:"FALSE",32:"NOT",33:"IN",34:"AND",35:"OR",36:"EQ",37:"NE",38:"+",39:"-",40:"*",41:"/",42:"(",43:")",45:"=",46:"DOT",48:"FOR",50:"IF",52:"ELSE",53:"ELIF",57:"IMPORT",59:"DEF",62:"INDENT",63:"DEDENT",65:"EOF"},
productions_: [0,[3,1],[5,1],[7,4],[7,4],[12,3],[12,3],[15,1],[15,1],[18,1],[18,1],[18,1],[20,1],[22,1],[24,3],[24,5],[19,3],[19,2],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[26,1],[26,1],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[13,1],[13,3],[13,3],[44,3],[11,3],[11,3],[31,4],[31,3],[31,4],[31,3],[47,6],[14,5],[14,7],[51,4],[51,6],[51,10],[51,8],[54,4],[54,4],[55,3],[56,2],[58,7],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[61,1],[61,2],[49,3],[64,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 3: case 4:
 this.$ = ['INDEX', $$[$0-3], $$[$0-1]]; 
break;
case 5: case 6: case 16: case 39: case 72:
 this.$ = $$[$0-1]; 
break;
case 12:
 this.object_stack = this.object_stack || [];  this.object_stack.push({}); this.$ = $$[$0]; 
break;
case 13:
 var ob = this.object_stack.pop(); 
break;
case 14:
 var key = $$[$0-2].substring(1, $$[$0-2].length-1); var obj = this.object_stack[this.object_stack.length-1]; obj[key] = $$[$0]; this.$ = obj; 
break;
case 15:
 var key = $$[$0-4].substring(1, $$[$0-4].length-1); var obj = this.object_stack[this.object_stack.length-1]; obj[key] = $$[$0-2]; this.$ = obj; 
break;
case 17:
 this.$ = {}; 
break;
case 29:
 this.$ = ['NOT', $$[$0]]; 
break;
case 30:
 this.$ = ['IN', $$[$0-2], $$[$0]]; 
break;
case 31:
 this.$ = ['AND', $$[$0-2], $$[$0]]; 
break;
case 32:
 this.$ = ['OR', $$[$0-2], $$[$0]]; 
break;
case 33:
 this.$ = ['EQ', $$[$0-2], $$[$0]]; 
break;
case 34:
 this.$ = ['NE', $$[$0-2], $$[$0]]; 
break;
case 35:
 this.$ = ['ADD', $$[$0-2], $$[$0]]; 
break;
case 36:
 this.$ = ['SUB', $$[$0-2], $$[$0]]; 
break;
case 37:
 this.$ = ['MUL', $$[$0-2], $$[$0]]; 
break;
case 38:
 this.$ = ['DIV', $$[$0-2], $$[$0]]; 
break;
case 40: case 70:
 this.$ = [$$[$0]]; 
break;
case 41: case 42:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 43:
 var par = {}; par[$$[$0-2]] = $$[$0]; this.$ = par; 
break;
case 44: case 45:
 this.$ = $$[$0-2]+$$[$0-1]+$$[$0]; 
break;
case 46: case 48:
 $$[$0-1].unshift($$[$0-3]); this.$ = $$[$0-1]; 
break;
case 47: case 49:
 this.$ = [$$[$0-2]]; 
break;
case 50:
 this.$ = ['FOR', $$[$0-2], $$[$0-4], $$[$0]]; 
break;
case 51:
 this.$ = ['FORI', $$[$0], $$[$0-2], $$[$0-4]]; 
break;
case 52:
 this.$ = ['FORI', $$[$0-2], $$[$0-4], $$[$0-6], $$[$0]]; 
break;
case 53:
 this.$ = ['IF', $$[$0-2], $$[$0]]; 
break;
case 54:
 this.$ = ['IF', $$[$0-4], $$[$0-2], $$[$0]]; 
break;
case 55:
 this.$ = ['IF', $$[$0-8], $$[$0-6], [['IF', $$[$0-4], $$[$0-2], $$[$0]]]]; 
break;
case 56:
 this.$ = ['IF', $$[$0-6], $$[$0-4], [['IF', $$[$0-2], $$[$0]]]]; 
break;
case 57: case 58:
 this.$ = ['IF', $$[$0-2], [$$[$0]]]; 
break;
case 59:
 this.$ = ['ASSIGN', $$[$0-2], $$[$0]]; 
break;
case 60:
 this.$ = ['IMPORT', $$[$0]]; 
break;
case 61:
 this.$ = ['DEF', $$[$0-5], $$[$0-3], $$[$0]]; 
break;
case 71:
 $$[$0].unshift($$[$0-1]); this.$ = $$[$0]; 
break;
case 73:
 yy.ast($$[$0-2]); this.$ = $$[$0-2]; 
break;
}
},
table: [{6:$V0,11:14,15:9,16:$V1,17:$V2,31:7,47:11,48:$V3,50:$V4,51:4,54:5,55:6,56:8,57:$V5,58:10,59:$V6,60:3,61:2,64:1},{1:[3]},{65:[1,20]},o($V7,[2,70],{60:3,51:4,54:5,55:6,31:7,56:8,15:9,58:10,47:11,11:14,61:21,6:$V0,16:$V1,17:$V2,48:$V3,50:$V4,57:$V5,59:$V6}),o($V8,[2,62]),o($V8,[2,63]),o($V8,[2,64]),o($V8,[2,65]),o($V8,[2,66]),o($V8,[2,67]),o($V8,[2,68]),o($V8,[2,69]),{5:31,6:$V9,7:33,8:$Va,9:$Vb,11:35,12:34,15:27,16:$V1,17:$V2,19:24,20:36,21:$Vc,26:22,28:23,29:$Vd,30:$Ve,31:32,32:$Vf,42:$Vg},{42:$Vh,45:[1,40],46:$Vi},{42:$Vj},{6:[1,44]},o($Vk,[2,7]),o($Vk,[2,8]),{6:[1,45]},{5:46,6:$Vl},{65:[1,48]},o($V7,[2,71]),{25:[1,49],34:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt},o($Vu,[2,27],{33:[1,58]}),o($Vu,[2,28]),{5:31,6:$V9,7:33,8:$Va,9:$Vb,11:35,12:34,15:27,16:$V1,17:$V2,19:24,20:36,21:$Vc,26:59,28:23,29:$Vd,30:$Ve,31:32,32:$Vf,42:$Vg},{5:31,6:$V9,7:33,8:$Va,9:$Vb,11:35,12:34,15:27,16:$V1,17:$V2,19:24,20:36,21:$Vc,26:60,28:23,29:$Vd,30:$Ve,31:32,32:$Vf,42:$Vg},o($Vk,[2,18]),o($Vk,[2,19]),o($Vk,[2,20]),o($Vk,[2,21]),o($Vk,$Vv),o($Vk,[2,23]),o($Vk,[2,24]),o($Vk,[2,25]),o($Vk,[2,26],{8:[1,61],42:$Vj}),{15:64,16:$V1,17:$V2,22:63,23:$Vw,24:62},o([6,10,16,17,23,25,27,33,34,35,36,37,38,39,40,41,43,45,48,50,57,59,63,65],$Vx,{8:[1,66],42:$Vh,46:$Vi}),{5:31,6:$V9,7:33,8:$Va,9:$Vb,11:35,12:34,13:67,14:68,15:27,16:$V1,17:$V2,19:24,20:36,21:$Vc,26:69,28:23,29:$Vd,30:$Ve,31:32,32:$Vf,42:$Vg},o([16,17,23],[2,12]),{5:31,6:$V9,7:33,8:$Va,9:$Vb,11:35,12:34,15:27,16:$V1,17:$V2,19:24,20:36,21:$Vc,26:70,28:23,29:$Vd,30:$Ve,31:32,32:$Vf,42:$Vg},{5:31,6:$V9,7:33,8:$Va,9:$Vb,11:35,12:34,13:71,15:27,16:$V1,17:$V2,19:24,20:36,21:$Vc,26:73,28:23,29:$Vd,30:$Ve,31:32,32:$Vf,42:$Vg,43:[1,72]},{6:[1,74],11:75},{5:31,6:$V9,7:33,8:$Va,9:$Vb,11:35,12:34,13:76,15:27,16:$V1,17:$V2,19:24,20:36,21:$Vc,26:73,28:23,29:$Vd,30:$Ve,31:32,32:$Vf,42:$Vg,43:[1,77]},o($V8,[2,60]),{42:[1,78]},{33:[1,79]},o([10,25,33,50],$Vx),{1:[2,73]},{6:$V0,11:14,31:81,49:80,55:82,62:$Vy},{5:31,6:$V9,7:33,8:$Va,9:$Vb,11:35,12:34,15:27,16:$V1,17:$V2,19:24,20:36,21:$Vc,26:84,28:23,29:$Vd,30:$Ve,31:32,32:$Vf,42:$Vg},{5:31,6:$V9,7:33,8:$Va,9:$Vb,11:35,12:34,15:27,16:$V1,17:$V2,19:24,20:36,21:$Vc,26:85,28:23,29:$Vd,30:$Ve,31:32,32:$Vf,42:$Vg},{5:31,6:$V9,7:33,8:$Va,9:$Vb,11:35,12:34,15:27,16:$V1,17:$V2,19:24,20:36,21:$Vc,26:86,28:23,29:$Vd,30:$Ve,31:32,32:$Vf,42:$Vg},{5:31,6:$V9,7:33,8:$Va,9:$Vb,11:35,12:34,15:27,16:$V1,17:$V2,19:24,20:36,21:$Vc,26:87,28:23,29:$Vd,30:$Ve,31:32,32:$Vf,42:$Vg},{5:31,6:$V9,7:33,8:$Va,9:$Vb,11:35,12:34,15:27,16:$V1,17:$V2,19:24,20:36,21:$Vc,26:88,28:23,29:$Vd,30:$Ve,31:32,32:$Vf,42:$Vg},{5:31,6:$V9,7:33,8:$Va,9:$Vb,11:35,12:34,15:27,16:$V1,17:$V2,19:24,20:36,21:$Vc,26:89,28:23,29:$Vd,30:$Ve,31:32,32:$Vf,42:$Vg},{5:31,6:$V9,7:33,8:$Va,9:$Vb,11:35,12:34,15:27,16:$V1,17:$V2,19:24,20:36,21:$Vc,26:90,28:23,29:$Vd,30:$Ve,31:32,32:$Vf,42:$Vg},{5:31,6:$V9,7:33,8:$Va,9:$Vb,11:35,12:34,15:27,16:$V1,17:$V2,19:24,20:36,21:$Vc,26:91,28:23,29:$Vd,30:$Ve,31:32,32:$Vf,42:$Vg},{5:31,6:$V9,7:33,8:$Va,9:$Vb,11:35,12:34,15:27,16:$V1,17:$V2,28:92,29:$Vd,30:$Ve,31:32},o([6,10,16,17,23,25,27,43,48,50,57,59,63,65],[2,29],{34:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt}),{34:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,43:[1,93]},{9:[1,94]},{22:95,23:$Vw},o($Vu,[2,17]),{25:[1,96]},o($Vu,[2,13]),{9:[1,97]},{10:[1,98],27:$Vz},{10:[1,100]},o([10,27],$VA,{34:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,48:[1,101]}),o($V8,[2,59],{34:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt}),{27:$Vz,43:[1,102]},o($Vk,[2,47]),o([27,43],$VA,{34:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt}),o($VB,[2,44],{46:$Vi}),o($VB,[2,45]),{27:$Vz,43:[1,103]},o($Vk,[2,49]),{5:31,6:$V9,7:33,8:$Va,9:$Vb,11:35,12:34,13:104,15:27,16:$V1,17:$V2,19:24,20:36,21:$Vc,26:73,28:23,29:$Vd,30:$Ve,31:32,32:$Vf,42:$Vg},{5:105,6:$Vl},o($V8,[2,53],{52:[1,106],53:[1,107]}),o($V8,[2,57]),o($V8,[2,58]),{6:$V0,11:14,15:9,16:$V1,17:$V2,31:7,47:11,48:$V3,50:$V4,51:4,54:5,55:6,56:8,57:$V5,58:10,59:$V6,60:3,61:108},o($VC,[2,31],{36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt}),o($VC,[2,32],{36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt}),o($VD,[2,33],{38:$Vq,39:$Vr,40:$Vs,41:$Vt}),o($VD,[2,34],{38:$Vq,39:$Vr,40:$Vs,41:$Vt}),o($VE,[2,35],{40:$Vs,41:$Vt}),o($VE,[2,36],{40:$Vs,41:$Vt}),o($Vu,[2,37]),o($Vu,[2,38]),o($Vu,[2,30]),o($Vu,[2,39]),{10:[1,109]},o($Vu,[2,16]),{5:31,6:$V9,7:33,8:$Va,9:$Vb,11:35,12:34,15:27,16:$V1,17:$V2,19:24,20:36,21:$Vc,26:110,28:23,29:$Vd,30:$Ve,31:32,32:$Vf,42:$Vg},{10:[1,111]},o($Vk,[2,5]),{5:114,6:$V9,7:33,8:$Va,9:$Vb,11:35,12:34,15:27,16:$V1,17:$V2,19:24,20:36,21:$Vc,26:112,28:23,29:$Vd,30:$Ve,31:32,32:$Vf,42:$Vg,44:113},o($Vk,[2,6]),{5:115,6:$Vl},o($Vk,[2,46]),o($Vk,[2,48]),{27:$Vz,43:[1,116]},{25:[1,117]},{49:118,62:$Vy},{5:31,6:$V9,7:33,8:$Va,9:$Vb,11:35,12:34,15:27,16:$V1,17:$V2,19:24,20:36,21:$Vc,26:119,28:23,29:$Vd,30:$Ve,31:32,32:$Vf,42:$Vg},{63:[1,120]},o($Vk,[2,4]),{23:[2,14],27:[1,121],34:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt},o($Vk,[2,3]),o($VF,[2,41],{34:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt}),o($VF,[2,42]),o([10,27,33,34,35,36,37,38,39,40,41,43],$Vv,{45:[1,122]}),{33:[1,123]},{25:[1,124]},{49:125,62:$Vy},o($V8,[2,54]),{25:[1,126],34:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt},o([6,16,17,48,50,52,53,57,59,63,65],[2,72]),{15:64,16:$V1,17:$V2,24:127},{5:31,6:$V9,7:33,8:$Va,9:$Vb,11:35,12:34,15:27,16:$V1,17:$V2,19:24,20:36,21:$Vc,26:128,28:23,29:$Vd,30:$Ve,31:32,32:$Vf,42:$Vg},{5:129,6:$Vl},{49:130,62:$Vy},o($V8,[2,50]),{49:131,62:$Vy},{23:[2,15]},o($VF,[2,43],{34:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt}),{10:[2,51],50:[1,132]},o($V8,[2,61]),o($V8,[2,56],{52:[1,133]}),{5:31,6:$V9,7:33,8:$Va,9:$Vb,11:35,12:34,15:27,16:$V1,17:$V2,19:24,20:36,21:$Vc,26:134,28:23,29:$Vd,30:$Ve,31:32,32:$Vf,42:$Vg},{49:135,62:$Vy},{10:[2,52],34:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt},o($V8,[2,55])],
defaultActions: {48:[2,73],127:[2,15]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* return 'COMMENT'; */
break;
case 1: this.begin('noindendation'); return 21; 
break;
case 2: this.begin('noindendation'); return 8; 
break;
case 3:/* skip space in object declaration */
break;
case 4: this.popState(); return 23; 
break;
case 5: this.popState(); return 10; 
break;
case 6:
                          // remaining DEDENTs implied by EOF, regardless of tabs/spaces
                          parser.forceDedent = parser.forceDedent || 0;
                          if (parser.forceDedent) {
                            parser.forceDedent -= 1;
                            this.unput(yy_.yytext);
                            return 63;
                          }
                          var tokens = [];
                          while (0 < _iemitstack[0]) {
                            tokens.unshift("DEDENT");
                            _iemitstack.shift();
                          }
                          if (tokens.length) {
                            parser.forceDedent = tokens.length - 1;
                            this.unput(yy_.yytext);
                            return 63;
                          } else return 65;
                        
break;
case 7:/* eat blank lines */
break;
case 8:
                          parser.forceDedent = parser.forceDedent || 0;
                          if (parser.forceDedent) {
                            parser.forceDedent -= 1;
                            this.unput(yy_.yytext);
                            return 63;
                          }
                          var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;
                          if (indentation > _iemitstack[0]) {
                            _iemitstack.unshift(indentation);
                            return 62;
                          }
                          var tokens = [];
                          while (indentation < _iemitstack[0]) {
                            tokens.unshift("DEDENT");
                            _iemitstack.shift();
                          }
                          if (tokens.length) {
                            parser.forceDedent = tokens.length - 1;
                            this.unput(yy_.yytext);
                            return 63;
                          };
                        
break;
case 9:/*  skip space */
break;
case 10:return 9;
break;
case 11:return 17
break;
case 12:return 17
break;
case 13:return 16;
break;
case 14:return 16;
break;
case 15:return 40
break;
case 16:return 41
break;
case 17:return 39
break;
case 18:return 38
break;
case 19:return 36
break;
case 20:return 37
break;
case 21:return 34
break;
case 22:return 35
break;
case 23:return 32
break;
case 24:return 33
break;
case 25:return 48
break;
case 26:return 45
break;
case 27:return 42
break;
case 28:return 43
break;
case 29:return 46
break;
case 30:return 27
break;
case 31:return 25
break;
case 32:return 50
break;
case 33:return 53
break;
case 34:return 52
break;
case 35:return 29
break;
case 36:return 30
break;
case 37:return 57
break;
case 38:return 59
break;
case 39:return 6
break;
}
},
rules: [/^(?:[\s]*#[^\n]*)/,/^(?:\{)/,/^(?:\[)/,/^(?:[\s\n]+)/,/^(?:\})/,/^(?:\])/,/^(?:[\s]*$)/,/^(?:[\n\r]+[\s]*(?![^\n\r]))/,/^(?:[\n\r][\s]*)/,/^(?:[\s]+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"""[\s\S]+?""")/,/^(?:'''[\s\S]+?''')/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:==)/,/^(?:!=)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:not\b)/,/^(?:in\b)/,/^(?:for\b)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:,)/,/^(?::)/,/^(?:if\b)/,/^(?:elif\b)/,/^(?:else:)/,/^(?:True\b)/,/^(?:False\b)/,/^(?:import\b)/,/^(?:def\b)/,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/],
conditions: {"noindendation":{"rules":[0,1,2,3,4,5,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39],"inclusive":true},"INITIAL":{"rules":[0,1,2,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39],"inclusive":true}}
});
_iemitstack = [0];
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = sdkbar_parser;
exports.Parser = sdkbar_parser.Parser;
exports.parse = function () { return sdkbar_parser.parse.apply(sdkbar_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}